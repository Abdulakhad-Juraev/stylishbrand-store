<?php
/**
 * @author uluGbek <muhammadjonovulugbek98@gmail.com>
 * @link https://t.me/U_Muhammadjonov
 * @date 25-Apr-24, 21:33
 */

namespace backend\controllers;

use common\models\User;
use common\modules\order\models\Order;
use common\modules\tariff\models\Tariff;
use common\modules\user\models\UserPayment;
use common\modules\uzum\models\UzumData;
use common\modules\uzum\models\UzumTransaction;
use common\modules\video\models\Video;
use Yii;
use yii\base\InvalidConfigException;
use yii\base\Security;
use yii\db\Exception;
use yii\rest\Controller;

class UzumController extends Controller
{
    /**
     * @var
     */
    public $username;

    /**
     * @var
     */
    public $password;


    /**
     * @return array|void
     */
    public function init()
    {
        $this->username = Yii::$app->request->getAuthUser();
        $this->password = Yii::$app->request->getAuthPassword();

        parent::init(); // TODO: Change the autogenerated stub
    }

    /**
     * @return array|void
     * @throws InvalidConfigException
     */
    public function actionCheck()
    {
        if ($this->username != UzumData::$username || $this->password != UzumData::$password) {

            Yii::$app->response->statusCode = 400;

            return [
                "serviceId" => UzumData::$serviceId,
                "timestamp" => intval(date_create()->format('Uv')),
                "status" => "FAILED",
                "errorCode" => "10007"
            ];
        }

        $data = json_decode(Yii::$app->request->getRawBody(), true);

        if (!$data || !isset($data['params']['orderId'])) {

            Yii::$app->response->statusCode = 400;

            return [
                "serviceId" => UzumData::$serviceId,
                "timestamp" => intval(date_create()->format('Uv')),
                "status" => "FAILED",
                "errorCode" => "10007"
            ];
        }

        if ($data && isset($data['params']['orderId'])) {

            /** @var Order $order */

            $order = Order::find()
                ->andWhere(['id' => $data['params']['orderId']])
                ->andWhere(['status' => Order::STATUS_INACTIVE])
                ->one();

            if (!$order) {

                Yii::$app->response->statusCode = 400;

                return [
                    "serviceId" => UzumData::$serviceId,
                    "timestamp" => intval(date_create()->format('Uv')),
                    "status" => "FAILED",
                    "errorCode" => "10007"
                ];
            }

            return [
                "serviceId" => UzumData::$serviceId,
                "timestamp" => intval(date_create()->format('Uv')),
                "status" => "OK",
                "data" => [
                    "orderId" => [
                        "value" => $order->id
                    ],
                    "fio" => [
                        "value" => $order->user->getFullName()
                    ]
                ]
            ];
        }
    }

    /**
     * @return array|void
     * @throws Exception
     */
    public function actionCreate()
    {
        $data = json_decode(Yii::$app->request->getRawBody(), true);

        if ($this->username != UzumData::$username || $this->password != UzumData::$password) {

            Yii::$app->response->statusCode = 400;

            return [
                "serviceId" => $data['serviceId'],
                'transId' => $data['transId'],
                "transTime" => intval(date_create()->format('Uv')),
                "status" => "FAILED",
                "errorCode" => "10013"
            ];
        }

        if ($data && isset($data['transId']) && isset($data['params']['orderId']) && isset($data['amount'])) {

            /** @var Order $order */

            $order = Order::findOne(['status' => Order::STATUS_INACTIVE, 'id' => $data['params']['orderId'], 'payment_type_id' => Order::$type_uzum]);

            if ($order) {

                if ($order->price != $data['amount'] / 100) {

                    return [
                        "serviceId" => $data['serviceId'],
                        'transId' => $data['transId'],
                        "transTime" => intval(date_create()->format('Uv')),
                        "status" => "FAILED",
                        "errorCode" => "10013"
                    ];
                }
                $model = new UzumTransaction([
                    'order_id' => $order->id,
                    'amount' => $data['amount'] / 100,
                    'serviceId' => $data['serviceId'],
                    'timestamp' => $data['timestamp'],
                    'transId' => $data['transId'],
                    'status' => UzumTransaction::$status_created,
                    'transTime' => date_create()->format('Uv')
                ]);


                if ($model->save()) {

                    return [
                        "serviceId" => $model->serviceId,
                        'transId' => $model->transId,
                        'status' => $model->status,
                        "transTime" => intval($model->transTime),
                        "data" => [
                            "orderId" => [
                                "value" => $model->order_id
                            ],
                            "fio" => [
                                "value" => $model->order->user->getFullName()
                            ]
                        ]
                    ];
                }

            } else {

                Yii::$app->response->statusCode = 400;

                return [
                    "serviceId" => $data['serviceId'],
                    'transId' => $data['transId'],
                    "transTime" => intval(date_create()->format('Uv')),
                    "status" => "FAILED",
                    "errorCode" => "10013"
                ];
            }

        }

        Yii::$app->response->statusCode = 400;

        return [
            "serviceId" => $data['serviceId'],
            'transId' => $data['transId'],
            "transTime" => intval(date_create()->format('Uv')),
            "status" => "FAILED",
            "errorCode" => "10013"
        ];

    }


    /**
     * @return array|void
     */
    public function actionConfirm()
    {
        $data = json_decode(Yii::$app->request->getRawBody(), true);

        if ($this->username != UzumData::$username || $this->password != UzumData::$password) {

            Yii::$app->response->statusCode = 400;

            return [
                "serviceId" => $data['serviceId'],
                'transId' => $data['transId'],
                "confirmTime" => intval(date_create()->format('Uv')),
                "status" => "FAILED",
                "errorCode" => "10014"
            ];
        }

        if ($data && isset($data['transId']) && isset($data['timestamp']) && isset($data['serviceId'])) {

            /** @var UzumTransaction $trans */

            $trans = UzumTransaction::find()
                ->andWhere(['status' => UzumTransaction::$status_created, 'transId' => $data['transId']])
                ->orderBy(['created_at' => SORT_DESC])
                ->one();

            $order = Order::findOne(['id' => $trans->order_id, 'status' => Order::STATUS_INACTIVE, 'payment_type_id' => Order::$type_uzum]);

            if ($trans && $order) {

                $trans->confirmTime = date_create()->format('Uv');
                $trans->status = UzumTransaction::$status_confirmed;

                if ($trans->save()) {

                    $order->status = Order::STATUS_ACTIVE;
                    $order->transaction_id = $trans->id;
                    $order->save();
                }
                $user = User::findOne($order->user_id);

                // kitob uchun tekshirish shart emas, order tabledan olinaveradi ma'lumotlar
                $owner_id = $order->book_id;

                if ($order->type_id == Order::$type_id_tariff) {
                    $tariff = Tariff::findOne($order->tariff_id);
                    $owner_id = $tariff->id;
                    $user->purchaseTariff($tariff, $order->id, $order->payment_type_id);
                }

                // maxsus kursni sotib olish
                if ($order->type_id == Order::$type_id_special_course) {
                    $course = Video::findOne($order->video_id);
                    $owner_id = $course->id;
                    $user->purchaseCourse($course, $order, $order->payment_type_id);
                }

                $user->addBalance($order->price, $order->payment_type_id, $order->type_id, $order->transaction_id, $owner_id, null);

                return [
                    "serviceId" => $trans->serviceId,
                    'transId' => $trans->transId,
                    'status' => $trans->status,
                    "confirmTime" => intval($trans->transTime),
                    "data" => [
                        "orderId" => [
                            "value" => $trans->order_id
                        ],
                        "fio" => [
                            "value" => $trans->order->user->getFullName()
                        ]
                    ]
                ];

            }
        }

        return [
            "serviceId" => $data['serviceId'],
            'transId' => $data['transId'],
            "confirmTime" => intval(date_create()->format('Uv')),
            "status" => "FAILED",
            "errorCode" => "10014"
        ];

    }

    /**
     * @return array
     */
    public function actionReverse()
    {
        $data = json_decode(Yii::$app->request->getRawBody(), true);

        if ($this->username != UzumData::$username || $this->password != UzumData::$password) {

            Yii::$app->response->statusCode = 400;

            return [
                "serviceId" => $data['serviceId'],
                'transId' => $data['transId'],
                "confirmTime" => intval(date_create()->format('Uv')),
                "status" => "FAILED",
                "errorCode" => "10017"
            ];
        }

        if ($data && isset($data['transId']) && isset($data['timestamp']) && isset($data['serviceId'])) {

            /** @var UzumTransaction $trans */

            $trans = UzumTransaction::find()
                ->andWhere(['status' => UzumTransaction::$status_confirmed, 'transId' => $data['transId']])
                ->orderBy(['created_at' => SORT_DESC])
                ->one();

            if ($trans) {

                $order = Order::findOne(['id' => $trans->order_id]);

                if ($order->type_id == Order::$type_id_book) {

                    $userPayment = UserPayment::find()
                        ->andWhere(['user_id' => $order->user_id])
                        ->andWhere(['payment_type_id' => $order->payment_type_id])
                        ->andWhere(['type_id' => $order->type_id])
                        ->andWhere(['transaction_id' => $order->transaction_id])
                        ->one();

                    $userPayment->delete();

                    $order->status = Order::STATUS_INACTIVE;
                    $order->transaction_id = null;
                    $order->save();

                    $trans->status = UzumTransaction::$status_reversed;
                    $trans->reverseTime = date_create()->format('Uv');
                    $trans->save();


                    return [

                        "serviceId" => $trans->serviceId,
                        "transId" => $trans->transId,
                        "status" => "REVERSED",
                        "reverseTime" => $trans->reverseTime,
                        "data" => [
                            "orderId" => [
                                "value" => $trans->order_id
                            ],
                            "fio" => [
                                "value" => $trans->order->user->getFullname()
                            ]
                        ],
                        "amount" => $trans->amount * 100
                    ];
                }


            }
        }

        return [
            "serviceId" => $data['serviceId'],
            'transId' => $data['transId'],
            "confirmTime" => intval(date_create()->format('Uv')),
            "status" => "FAILED",
            "errorCode" => "10017"
        ];
    }

    /**
     * @return array
     */
    public function actionStatus()
    {
        $data = json_decode(Yii::$app->request->getRawBody(), true);

        if ($this->username != UzumData::$username || $this->password != UzumData::$password) {

            Yii::$app->response->statusCode = 400;

            return [
                "serviceId" => $data['serviceId'],
                "transId" => $data['transId'],
                "status" => "FAILED",
                "transTime" => date_create()->format('Uv'),
                "confirmTime" => date_create()->format('Uv'),
                "reverseTime" => null,
                "errorCode" => "10014",
            ];
        }

        if ($data && isset($data['transId']) && isset($data['timestamp']) && isset($data['serviceId'])) {

            /** @var UzumTransaction $trans */

            $trans = UzumTransaction::find()
                ->andWhere(['transId' => $data['transId']])
                ->orderBy(['created_at' => SORT_DESC])
                ->one();

            if ($trans) {

                return [
                    "serviceId" => $trans->serviceId,
                    "transId" => $trans->transId,
                    "status" => $trans->status,
                    "transTime" => intval($trans->transTime),
                    "confirmTime" => intval($trans->confirmTime),
                    "reverseTime" => intval($trans->reverseTime),
                    "data" => [
                        "orderId" => [
                            'value' => $trans->order_id
                        ],
                        "fio" => [
                            'value' => $trans->order->user->getFullname()
                        ]
                    ],
                    "amount" => $trans->amount * 100
                ];

            }
        }

        return [
            "serviceId" => $data['serviceId'],
            "transId" => $data['transId'],
            "status" => "FAILED",
            "transTime" => date_create()->format('Uv'),
            "confirmTime" => date_create()->format('Uv'),
            "reverseTime" => null,
            "errorCode" => "10014",
        ];
    }
}